## /django/nginx.conf

# NGINX Configured to run as a reverse proxy. Works like so:
# HTTP Client <==> nginx <==> gunicorn (socket) <==> Django

worker_processes 1;
error_log  /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024; # increase if you have lots of clients
    accept_mutex off; # set to 'on' if nginx worker_processes > 1
    # 'use epoll;' to enable for Linux 2.6+
    # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
    access_log          /var/log/nginx/access.log  combined;
    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096;
    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    upstream gunicorn_xkcd_app_server {
        server unix:/django/run/gunicorn.sock fail_timeout=0;
    }

    server {
        listen       8080;
        server_name  _;
        client_max_body_size 4G;
        access_log /dev/null;
        error_log /dev/null;
        keepalive_timeout 5;
        
        location /static/ {
            alias   /django/static/;
        }
        
        location /media/ {
            alias   /django/media/;
        }
        
        location / {
            try_files $uri @proxy_to_app;
        }

        location @proxy_to_app {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            # we don't want nginx trying to do something clever with
            # redirects, we set the Host: header above already.
            proxy_redirect off;
            proxy_pass http://gunicorn_xkcd_app_server;
        }
        # Error pages
        error_page 500 502 503 504 /500.html;
        location = /500.html {
            root /usr/share/nginx/html;
        }
    }
}
